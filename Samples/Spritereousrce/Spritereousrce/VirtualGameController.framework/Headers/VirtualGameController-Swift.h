// Generated by Apple Swift version 4.0.1 (swiftlang-900.0.66 clang-900.0.37)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_attribute(external_source_symbol)
# define SWIFT_STRINGIFY(str) #str
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name) _Pragma(SWIFT_STRINGIFY(clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in=module_name, generated_declaration))), apply_to=any(function, enum, objc_interface, objc_category, objc_protocol))))
# define SWIFT_MODULE_NAMESPACE_POP _Pragma("clang attribute pop")
#else
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name)
# define SWIFT_MODULE_NAMESPACE_POP
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import GameController;
@import WatchConnectivity;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

SWIFT_MODULE_NAMESPACE_PUSH("VirtualGameController")
/// appRole:
/// The appRole value must ONLY be set by passing it as a parameter to startAs.
/// <ul>
///   <li>
///     .Central:           The consumer of the Peripheral data, typically a game.
///   </li>
///   <li>
///     .Peripheral:        A game controller that may be a hardware controller or a
///     VGC software controller, it receives input from a user through
///     Elements (buttons, thumbsticks, accelerometer, etc.) and sends
///     those values to either a Bridge or a Central.
///   </li>
///   <li>
///     .Bridge:            An intermediary between Peripherals and the Central, which
///     effectively functions as both a Central and Peripheral, usually
///     forwarding element values to the Central, although it may also
///     process those values in terms of calling handlers. An iPhone
///     positioned in a slide-on controller will typically function as
///     as a Bridge (although it can also be a Central).  An iPhone paired
///     with an Apple Watch that is functioning as a Peripheral will act
///     as a Bridge.
///   </li>
///   <li>
///     .EnhancementBridge:  Special Bridge mode for using a form-fitting/slide-on controller
///     with an iPhone.  Prevents additional Peripherals from connecting.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, AppRole) {
  AppRoleUndefined = 0,
  AppRoleCentral = 1,
  AppRolePeripheral = 2,
  AppRoleBridge = 3,
  AppRoleEnhancementBridge = 4,
  AppRoleMultiplayerPeer = 5,
};

/// ControllerType enumeration: Most values are for informational purposes,
/// except MFiHardware, which is used to trigger the “wrapped” approach to
/// handling hardware controllers in VgcController.
typedef SWIFT_ENUM(NSInteger, ControllerType) {
  ControllerTypeSoftware = 0,
  ControllerTypeMFiHardware = 1,
  ControllerTypeICadeHardware = 2,
  ControllerTypeBridgedMFiHardware = 3,
  ControllerTypeBridgedICadeHardware = 4,
  ControllerTypeWatch = 5,
};

enum ElementType : NSInteger;
enum ElementDataType : NSInteger;
@class VgcController;
@class NSMutableData;

/// Element is a class that represents each element/control on a controller, such as Button A or dpad.
/// Along with describing the controller element in terms of name and data type,and providing a
/// unique identifier used when transmitting values, an element functions as the backing store that
/// allows for multiple profiles to share the same underlying data set.  For example, because the Gamepad
/// profile is a subset of the Extended Gamepad, the element provides the basis for providing access to
/// values through both profile interfaces for the same controller.
/// \param type ElementType enumerates the standard set of controller elements, plus a few system-
/// related elements, DeviceInfoElement, SystemMessage and Custom.
///
/// \param dataType Currently three data types are supported, .String, .Int, and .Float, enumerated
/// in ElementDataType.
///
/// \param name Human-readable name for the element.
///
/// \param value The canonical value for the element.
///
/// \param getterKeypath Path to the VgcController class interface for getting the value of the element.
///
/// \param setterKeypath Path to the VgcController class interface for triggering the developer-defined
/// handlers for the element.
///
/// \param identifier A unique integer indentifier used to identify the element a value belongs to
/// when transmitting the value over the network.
///
/// \param mappingComplete A state management value used as a part of the peripheral-side element mapping system.
///
SWIFT_CLASS("_TtC21VirtualGameController7Element")
@interface Element : NSObject
@property (nonatomic) enum ElementType type;
@property (nonatomic) enum ElementDataType dataType;
@property (nonatomic, copy) NSString * _Nonnull name;
@property (nonatomic, strong) id _Nonnull value;
@property (nonatomic, copy) NSString * _Nonnull getterKeypath;
@property (nonatomic, copy) NSString * _Nonnull setterKeypath;
/// Automatically clear out value after transfering
@property (nonatomic) BOOL clearValueAfterTransfer;
@property (nonatomic, copy) void (^ _Null_unspecified valueChangedHandler)(VgcController * _Nonnull, Element * _Nonnull);
@property (nonatomic, copy) void (^ _Null_unspecified valueChangedHandlerForPeripheral)(Element * _Nonnull);
@property (nonatomic, readonly) NSInteger hashValue;
- (nonnull instancetype)initWithType:(enum ElementType)type dataType:(enum ElementDataType)dataType name:(NSString * _Nonnull)name getterKeypath:(NSString * _Nonnull)getterKeypath setterKeypath:(NSString * _Nonnull)setterKeypath OBJC_DESIGNATED_INITIALIZER;
- (void)clearValue;
@property (nonatomic, readonly, strong) NSMutableData * _Nonnull dataMessage;
@property (nonatomic, copy) NSData * _Nonnull valueAsNSData;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class NSCoder;

SWIFT_CLASS("_TtC21VirtualGameController13CustomElement")
@interface CustomElement : Element
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name dataType:(enum ElementDataType)dataType type:(NSInteger)type OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)decoder;
- (nonnull instancetype)initWithType:(enum ElementType)type dataType:(enum ElementDataType)dataType name:(NSString * _Nonnull)name getterKeypath:(NSString * _Nonnull)getterKeypath setterKeypath:(NSString * _Nonnull)setterKeypath SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC21VirtualGameController24CustomElementsSuperclass")
@interface CustomElementsSuperclass : NSObject
@property (nonatomic, copy) void (^ _Null_unspecified valueChangedHandler)(VgcController * _Nonnull, Element * _Nonnull);
@property (nonatomic, copy) NSArray<Element *> * _Nonnull customProfileElements;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC21VirtualGameController24CustomMappingsSuperclass")
@interface CustomMappingsSuperclass : NSObject
@property (nonatomic, copy) NSDictionary<NSNumber *, NSNumber *> * _Nonnull mappings;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum ProfileType : NSInteger;

/// DeviceInfo contains key properties of a controller, either hardware or software.
/// \param deviceUID Unique identifier for the controller.  Hardware controllers have this built-in.  An arbitrary identifier can be given to a software controller, and the NSUUID().UUIDString function is recommended.
///
/// \param vendorName Built-in to a hardware controller.  For software controllers, either define a name or use an empty string “” and the machine/device name will be used.
///
/// \param profileType Built-in to a hardware controller.  This can be aribtrarily set to either extendedGamepad or Gamepad for a software controller, and will determine what elements are available to the controller.  microGamepad is only available in the tvOS context and is untested with software controllers.
///
/// \param supportsMotion Built-in parameter with a hardware controller (the Apple TV remote is the only hardware controller known to support motion). This can be set when defining a software controller, but would be overriden on the basis of the availabiity of Core Motion.  For example, an OSX-based software controller would report supports motion as false.
///
SWIFT_CLASS("_TtC21VirtualGameController10DeviceInfo")
@interface DeviceInfo : NSObject <NSCoding>
@property (nonatomic, readonly, copy) NSString * _Nonnull vendorName;
@property (nonatomic, readonly) BOOL attachedToDevice;
@property (nonatomic) enum ProfileType profileType;
@property (nonatomic, readonly) enum ControllerType controllerType;
@property (nonatomic, readonly) BOOL supportsMotion;
- (nonnull instancetype)initWithDeviceUID:(NSString * _Nonnull)deviceUID vendorName:(NSString * _Nonnull)vendorName attachedToDevice:(BOOL)attachedToDevice profileType:(enum ProfileType)profileType controllerType:(enum ControllerType)controllerType supportsMotion:(BOOL)supportsMotion OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)decoder;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


typedef SWIFT_ENUM(NSInteger, ElementDataType) {
  ElementDataTypeInt = 0,
  ElementDataTypeFloat = 1,
  ElementDataTypeString = 2,
  ElementDataTypeData = 3,
};

typedef SWIFT_ENUM(NSInteger, ElementType) {
  ElementTypeDeviceInfoElement = 0,
  ElementTypeSystemMessage = 1,
  ElementTypePlayerIndex = 2,
  ElementTypePeripheralSetup = 3,
  ElementTypeVibrateDevice = 4,
  ElementTypeImage = 5,
  ElementTypePauseButton = 6,
  ElementTypeLeftShoulder = 7,
  ElementTypeRightShoulder = 8,
  ElementTypeDpadXAxis = 9,
  ElementTypeDpadYAxis = 10,
  ElementTypeButtonA = 11,
  ElementTypeButtonB = 12,
  ElementTypeButtonX = 13,
  ElementTypeButtonY = 14,
  ElementTypeLeftThumbstickXAxis = 15,
  ElementTypeLeftThumbstickYAxis = 16,
  ElementTypeRightThumbstickXAxis = 17,
  ElementTypeRightThumbstickYAxis = 18,
  ElementTypeLeftTrigger = 19,
  ElementTypeRightTrigger = 20,
  ElementTypeMotionUserAccelerationX = 21,
  ElementTypeMotionUserAccelerationY = 22,
  ElementTypeMotionUserAccelerationZ = 23,
  ElementTypeMotionAttitudeX = 24,
  ElementTypeMotionAttitudeY = 25,
  ElementTypeMotionAttitudeZ = 26,
  ElementTypeMotionAttitudeW = 27,
  ElementTypeMotionRotationRateX = 28,
  ElementTypeMotionRotationRateY = 29,
  ElementTypeMotionRotationRateZ = 30,
  ElementTypeMotionGravityX = 31,
  ElementTypeMotionGravityY = 32,
  ElementTypeMotionGravityZ = 33,
  ElementTypeCustom = 34,
};


/// The Elements class describes the full population of controller controls, as well as
/// providing definitions of the population of elements for each profile type.
SWIFT_CLASS("_TtC21VirtualGameController8Elements")
@interface Elements : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@property (nonatomic, copy) NSArray<Element *> * _Nonnull watchProfileElements;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) CustomElementsSuperclass * _Null_unspecified customElements;)
+ (CustomElementsSuperclass * _Null_unspecified)customElements SWIFT_WARN_UNUSED_RESULT;
+ (void)setCustomElements:(CustomElementsSuperclass * _Null_unspecified)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) CustomMappingsSuperclass * _Null_unspecified customMappings;)
+ (CustomMappingsSuperclass * _Null_unspecified)customMappings SWIFT_WARN_UNUSED_RESULT;
+ (void)setCustomMappings:(CustomMappingsSuperclass * _Null_unspecified)value;
@property (nonatomic, copy) NSDictionary<NSNumber *, Element *> * _Nonnull custom;
@property (nonatomic, copy) NSArray<Element *> * _Nonnull customProfileElements;
- (NSArray<Element *> * _Nonnull)allElementsCollection SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) Element * _Nonnull systemMessage;
@property (nonatomic, strong) Element * _Nonnull deviceInfoElement;
@property (nonatomic, strong) Element * _Nonnull playerIndex;
@property (nonatomic, strong) Element * _Nonnull pauseButton;
@property (nonatomic, strong) Element * _Nonnull peripheralSetup;
@property (nonatomic, strong) Element * _Nonnull vibrateDevice;
@property (nonatomic, strong) Element * _Nonnull image;
@property (nonatomic, strong) Element * _Nonnull leftShoulder;
@property (nonatomic, strong) Element * _Nonnull rightShoulder;
@property (nonatomic, strong) Element * _Nonnull dpadXAxis;
@property (nonatomic, strong) Element * _Nonnull dpadYAxis;
@property (nonatomic, strong) Element * _Nonnull buttonA;
@property (nonatomic, strong) Element * _Nonnull buttonB;
@property (nonatomic, strong) Element * _Nonnull buttonX;
@property (nonatomic, strong) Element * _Nonnull buttonY;
@property (nonatomic, strong) Element * _Nonnull leftThumbstickXAxis;
@property (nonatomic, strong) Element * _Nonnull leftThumbstickYAxis;
@property (nonatomic, strong) Element * _Nonnull rightThumbstickXAxis;
@property (nonatomic, strong) Element * _Nonnull rightThumbstickYAxis;
@property (nonatomic, strong) Element * _Nonnull rightTrigger;
@property (nonatomic, strong) Element * _Nonnull leftTrigger;
@property (nonatomic, strong) Element * _Nonnull motionUserAccelerationX;
@property (nonatomic, strong) Element * _Nonnull motionUserAccelerationY;
@property (nonatomic, strong) Element * _Nonnull motionUserAccelerationZ;
@property (nonatomic, strong) Element * _Nonnull motionRotationRateX;
@property (nonatomic, strong) Element * _Nonnull motionRotationRateY;
@property (nonatomic, strong) Element * _Nonnull motionRotationRateZ;
@property (nonatomic, strong) Element * _Nonnull motionGravityX;
@property (nonatomic, strong) Element * _Nonnull motionGravityY;
@property (nonatomic, strong) Element * _Nonnull motionGravityZ;
@property (nonatomic, strong) Element * _Nonnull motionAttitudeX;
@property (nonatomic, strong) Element * _Nonnull motionAttitudeY;
@property (nonatomic, strong) Element * _Nonnull motionAttitudeZ;
@property (nonatomic, strong) Element * _Nonnull motionAttitudeW;
- (Element * _Null_unspecified)elementFromType:(enum ElementType)type SWIFT_WARN_UNUSED_RESULT;
- (Element * _Null_unspecified)elementFromIdentifier:(NSInteger)identifier SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, LogLevel) {
  LogLevelError = 0,
  LogLevelDebug = 1,
  LogLevelVerbose = 2,
};

@class VgcMotionManager;
@class VgcService;

SWIFT_CLASS("_TtC21VirtualGameController10Peripheral")
@interface Peripheral : NSObject
@property (nonatomic, strong) VgcMotionManager * _Null_unspecified motion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/// Key method used to send a change in an element’s state to the
/// Central or Bridge that we’re currently connected to with this
/// Peripheral.  “State” in this case refers to the Element “value”
/// property.
- (void)sendElementState:(Element * _Nonnull)element;
/// DeviceInfo for the controller represented by this Peripheral instance.
@property (nonatomic, strong) DeviceInfo * _Null_unspecified deviceInfo;
/// Connect to a Central or Bridge using a VgcService object obtained
/// by browsing the network.
- (void)connectToService:(VgcService * _Nonnull)vgcService;
- (void)disconnectFromService;
- (void)browseForServices;
- (void)stopBrowsingForServices;
@property (nonatomic, readonly, strong) VgcService * _Nullable connectedService;
@property (nonatomic, readonly, copy) NSArray<VgcService *> * _Nonnull availableServices;
@end

typedef SWIFT_ENUM(NSInteger, ProfileType) {
  ProfileTypeUnknown = 0,
  ProfileTypeGenericGamepad = 1,
  ProfileTypeMicroGamepad = 2,
  ProfileTypeGamepad = 3,
  ProfileTypeExtendedGamepad = 4,
  ProfileTypeMotion = 5,
  ProfileTypeWatch = 6,
};

@class VgcMotion;
@class VgcExtendedGamepad;
@class VgcGamepad;

/// VgcController is a wrapper around GCController.  Each instance
/// represents a hardware or software controller.  Hardware controllers
/// use GCController, and are wrapped by VgcController, but handlers and
/// properties are simply passed through to provide optimal performance.
/// The VgcController class provides muchly the same interface as
/// GCController, but does not descend from it.  In the case of
/// a hardware controller connected to the system, VgcController
/// encapsulates the controller in the var hardwareController, and
/// maps it’s properties to it’s own.  This provides a single interface
/// to both custom/software controllers and hardware controllers.
SWIFT_CLASS("_TtC21VirtualGameController13VgcController")
@interface VgcController : NSObject <NSNetServiceDelegate, NSStreamDelegate>
@property (nonatomic, strong) Elements * _Null_unspecified elements;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (NSArray<VgcController *> * _Nonnull)controllers SWIFT_WARN_UNUSED_RESULT;
- (void)disconnect;
- (void)vibrateDevice;
+ (void)controllerDidConnect:(NSNotification * _Nonnull)notification;
+ (void)controllerDidDisconnect:(NSNotification * _Nonnull)notification;
@property (nonatomic, readonly, strong) VgcMotion * _Nullable motion;
@property (nonatomic, strong) DeviceInfo * _Null_unspecified deviceInfo;
@property (nonatomic, readonly, strong) VgcExtendedGamepad * _Nullable extendedGamepad;
@property (nonatomic, readonly, strong) VgcGamepad * _Nullable gamepad;
@end

@class GCController;
@class GCControllerButtonInput;
@class GCControllerDirectionPad;
@class GCControllerElement;

SWIFT_CLASS("_TtC21VirtualGameController18VgcExtendedGamepad")
@interface VgcExtendedGamepad : GCExtendedGamepad
/// Returns a GCController hardware controller, if one is available.
/// vgcController must be used to get a reference to the VgcController, which
/// represents software controllers (as well as being a wrapper around the
/// hardware controller.
@property (nonatomic, readonly, weak) GCController * _Nullable controller;
@property (nonatomic, readonly, strong) GCControllerButtonInput * _Nonnull leftShoulder;
@property (nonatomic, readonly, strong) GCControllerButtonInput * _Nonnull rightShoulder;
@property (nonatomic, readonly, strong) GCControllerDirectionPad * _Nonnull dpad;
@property (nonatomic, readonly, strong) GCControllerButtonInput * _Nonnull buttonA;
@property (nonatomic, readonly, strong) GCControllerButtonInput * _Nonnull buttonB;
@property (nonatomic, readonly, strong) GCControllerButtonInput * _Nonnull buttonX;
@property (nonatomic, readonly, strong) GCControllerButtonInput * _Nonnull buttonY;
@property (nonatomic, readonly, strong) GCControllerButtonInput * _Nonnull leftTrigger;
@property (nonatomic, readonly, strong) GCControllerButtonInput * _Nonnull rightTrigger;
@property (nonatomic, readonly, strong) GCControllerDirectionPad * _Nonnull leftThumbstick;
@property (nonatomic, readonly, strong) GCControllerDirectionPad * _Nonnull rightThumbstick;
@property (nonatomic, copy) GCExtendedGamepadValueChangedHandler _Nullable valueChangedHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC21VirtualGameController26VgcExtendedGamepadSnapshot")
@interface VgcExtendedGamepadSnapshot : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC21VirtualGameController10VgcGamepad")
@interface VgcGamepad : GCGamepad
@property (nonatomic, readonly, strong) GCControllerButtonInput * _Nonnull leftShoulder;
@property (nonatomic, readonly, strong) GCControllerButtonInput * _Nonnull rightShoulder;
@property (nonatomic, readonly, strong) GCControllerDirectionPad * _Nonnull dpad;
@property (nonatomic, readonly, strong) GCControllerButtonInput * _Nonnull buttonA;
@property (nonatomic, readonly, strong) GCControllerButtonInput * _Nonnull buttonB;
@property (nonatomic, readonly, strong) GCControllerButtonInput * _Nonnull buttonX;
@property (nonatomic, readonly, strong) GCControllerButtonInput * _Nonnull buttonY;
/// Returns a GCController hardware controller, if one is available.
/// vgcController must be used to get a reference to the VgcController, which
/// represents software controllers (as well as being a wrapper around the
/// hardware controller.
@property (nonatomic, readonly, weak) GCController * _Nullable controller;
/// Same behavior as the GCController version.
@property (nonatomic, copy) GCGamepadValueChangedHandler _Nullable valueChangedHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC21VirtualGameController18VgcGamepadSnapshot")
@interface VgcGamepadSnapshot : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC21VirtualGameController18VgcIcadePeripheral")
@interface VgcIcadePeripheral : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC21VirtualGameController10VgcManager")
@interface VgcManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum AppRole appRole;)
+ (enum AppRole)appRole SWIFT_WARN_UNUSED_RESULT;
+ (void)setAppRole:(enum AppRole)value;
/// Shared set of elements (in contrast to controllers on a Central/Bridge, each
/// of which have their own set of elements).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) Elements * _Nonnull elements;)
+ (Elements * _Nonnull)elements SWIFT_WARN_UNUSED_RESULT;
+ (void)setElements:(Elements * _Nonnull)value;
/// Log Level “Debug” is a standard level of logging for debugging - set to “Error” for release
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum LogLevel loggerLogLevel;)
+ (enum LogLevel)loggerLogLevel SWIFT_WARN_UNUSED_RESULT;
+ (void)setLoggerLogLevel:(enum LogLevel)newValue;
/// Use either NSLog or Swift “print” for logging - NSLog gives more detail
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL loggerUseNSLog;)
+ (BOOL)loggerUseNSLog SWIFT_WARN_UNUSED_RESULT;
+ (void)setLoggerUseNSLog:(BOOL)newValue;
/// Used as a component of the bonjour names for the various app types.
/// This should be set to something that uniquely identifies your app.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull appIdentifier;)
+ (NSString * _Nonnull)appIdentifier SWIFT_WARN_UNUSED_RESULT;
+ (void)setAppIdentifier:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull uniqueServiceIdentifierString;)
+ (NSString * _Nonnull)uniqueServiceIdentifierString SWIFT_WARN_UNUSED_RESULT;
/// An app in Bridge mode can call it’s handlers or simply relay
/// data forward to the Central.  Relaying is more performant.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL bridgeRelayOnly;)
+ (BOOL)bridgeRelayOnly SWIFT_WARN_UNUSED_RESULT;
+ (void)setBridgeRelayOnly:(BOOL)value;
/// We support mapping from either the Peripheral or Central side.  Central-side mapping
/// is recommended; it is more efficient because two values do not need to be transmitted.
/// Central-side mapping also works with hardware controllers.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL usePeripheralSideMapping;)
+ (BOOL)usePeripheralSideMapping SWIFT_WARN_UNUSED_RESULT;
+ (void)setUsePeripheralSideMapping:(BOOL)value;
/// Filter duplicate float values, with comparison occuring at a certain
/// degree of decimal precision
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL enableDupFiltering;)
+ (BOOL)enableDupFiltering SWIFT_WARN_UNUSED_RESULT;
+ (void)setEnableDupFiltering:(BOOL)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSInteger dupFilteringPrecision;)
+ (NSInteger)dupFilteringPrecision SWIFT_WARN_UNUSED_RESULT;
+ (void)setDupFilteringPrecision:(NSInteger)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSInteger netServiceBufferSize;)
+ (NSInteger)netServiceBufferSize SWIFT_WARN_UNUSED_RESULT;
+ (void)setNetServiceBufferSize:(NSInteger)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL netServiceLatencyLogging;)
+ (BOOL)netServiceLatencyLogging SWIFT_WARN_UNUSED_RESULT;
+ (void)setNetServiceLatencyLogging:(BOOL)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL enableLocalController;)
+ (BOOL)enableLocalController SWIFT_WARN_UNUSED_RESULT;
+ (void)setEnableLocalController:(BOOL)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL useRandomServiceName;)
+ (BOOL)useRandomServiceName SWIFT_WARN_UNUSED_RESULT;
+ (void)setUseRandomServiceName:(BOOL)value;
/// Logs measurements of mesages transmitted/received and displays in console
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL performanceSamplingEnabled;)
+ (BOOL)performanceSamplingEnabled SWIFT_WARN_UNUSED_RESULT;
/// Controls how long we wait before averaging the number of messages
/// transmitted/received per second when logging performance.  Set to 0 to disable.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) float performanceSamplingDisplayFrequency;)
+ (float)performanceSamplingDisplayFrequency SWIFT_WARN_UNUSED_RESULT;
+ (void)setPerformanceSamplingDisplayFrequency:(float)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) Peripheral * _Null_unspecified peripheral;)
+ (Peripheral * _Null_unspecified)peripheral SWIFT_WARN_UNUSED_RESULT;
+ (void)setPeripheral:(Peripheral * _Null_unspecified)value;
/// Simplified version of startAs when custom mapping and custom elements are not needed
+ (void)startAs:(enum AppRole)appRole appIdentifier:(NSString * _Nonnull)appIdentifier;
/// Simplified version of startAs when custom mapping and custom elements are not needed, but includesPeerToPeer is
+ (void)startAs:(enum AppRole)appRole appIdentifier:(NSString * _Nonnull)appIdentifier includesPeerToPeer:(BOOL)includesPeerToPeer;
/// Must use this startAs method to turn on peer to peer functionality (Bluetooth)
+ (void)startAs:(enum AppRole)appRole appIdentifier:(NSString * _Nonnull)appIdentifier customElements:(CustomElementsSuperclass * _Null_unspecified)customElements customMappings:(CustomMappingsSuperclass * _Null_unspecified)customMappings includesPeerToPeer:(BOOL)includesPeerToPeer;
/// Must use this startAs method to turn on peer to peer functionality (Bluetooth) and local game controller functionality
+ (void)startAs:(enum AppRole)appRole appIdentifier:(NSString * _Nonnull)appIdentifier customElements:(CustomElementsSuperclass * _Null_unspecified)customElements customMappings:(CustomMappingsSuperclass * _Null_unspecified)customMappings includesPeerToPeer:(BOOL)includesPeerToPeer enableLocalController:(BOOL)enableLocalController;
/// Kicks off the search for software controllers.  This is a required method and should be
/// called early in the application launch process.
+ (void)startAs:(enum AppRole)appRole appIdentifier:(NSString * _Nonnull)appIdentifier customElements:(CustomElementsSuperclass * _Null_unspecified)customElements customMappings:(CustomMappingsSuperclass * _Null_unspecified)customMappings;
@end


SWIFT_CLASS("_TtC21VirtualGameController9VgcMotion")
@interface VgcMotion : NSObject
@property (nonatomic) GCAcceleration userAcceleration;
@property (nonatomic) GCQuaternion attitude;
@property (nonatomic) GCRotationRate rotationRate;
@property (nonatomic) GCAcceleration gravity;
@property (nonatomic, copy) void (^ _Nullable valueChangedHandler)(VgcMotion * _Nonnull);
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class CMMotionManager;

SWIFT_CLASS("_TtC21VirtualGameController16VgcMotionManager")
@interface VgcMotionManager : NSObject
@property (nonatomic) BOOL deviceSupportsMotion;
@property (nonatomic, readonly, strong) CMMotionManager * _Nonnull manager;
@property (nonatomic) BOOL active;
/// Don’t enable these unless they are really needed because they produce
/// tons of data to be transmitted and clog the channels.
@property (nonatomic) BOOL enableUserAcceleration;
@property (nonatomic) BOOL enableRotationRate;
@property (nonatomic) BOOL enableAttitude;
@property (nonatomic) BOOL enableGravity;
@property (nonatomic) BOOL enableLowPassFilter;
@property (nonatomic) BOOL enableAdaptiveFilter;
@property (nonatomic) double cutOffFrequency;
/// System can handle 60 updates/sec but only if a subset of motion factors are enabled,
/// not all four.  If all four inputs are needed, update frequency should be reduced.
@property (nonatomic) double updateInterval;
- (void)start;
- (void)stop;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC21VirtualGameController18VgcPeripheralSetup")
@interface VgcPeripheralSetup : NSObject <NSCoding>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)decoder;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
@end


SWIFT_CLASS("_TtC21VirtualGameController10VgcService")
@interface VgcService : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull fullName;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class WCSession;

SWIFT_CLASS("_TtC21VirtualGameController8VgcWatch")
@interface VgcWatch : NSObject <WCSessionDelegate>
- (void)sessionReachabilityDidChange:(WCSession * _Nonnull)session;
- (void)session:(WCSession * _Nonnull)session didReceiveMessage:(NSDictionary<NSString *, id> * _Nonnull)message replyHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))replyHandler;
- (void)sessionDidDeactivate:(WCSession * _Nonnull)session SWIFT_AVAILABILITY(ios,introduced=9.3);
- (void)sessionDidBecomeInactive:(WCSession * _Nonnull)session SWIFT_AVAILABILITY(ios,introduced=9.3);
- (void)session:(WCSession * _Nonnull)session activationDidCompleteWithState:(WCSessionActivationState)activationState error:(NSError * _Nullable)error SWIFT_AVAILABILITY(ios,introduced=9.3);
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

SWIFT_MODULE_NAMESPACE_POP
#pragma clang diagnostic pop
